Index: kakegurui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import string,time\nimport random,sys\nfrom intro import kakegurui_intro\n\ndef display_rules():\n    print('''\n    Try your luck\n    Idea taken from: KAKEGURUI Season 1 episode 4\n\n    INDIAN POKER (deck of 40 cards with joker and face card removed)\n\n    game rules, read this before playing\n    rule 0: 2 players will play the game simultaneously which is 40 deck card Indian poker\n    rule 1: 1000 chips will be provided initially, game starts with 50 chip as fee and 2 cards to each player\n    rule 2: minimum of 25 chips can be bet at a time\n    rule 3: maximum of 100 chips can be bet at a time\n    rule 4: game will continue till the players give up or chip is 0 and player lose the bet\n    rule 5: type1:PAIR denotes same number\n    rule 6: type2:SUIT denotes same house\n    rule 7: type3:PIG denotes different house and different number\n    rule 8: if both the player have same type, higher sum is the winner\n\n    SO COME ON LETS GET KAKEGURUI FREAK ON\n    \\n ''')\n\n# heart(H), spade(S), club(C), diamond(D)\n\ndef deck_cards():\n    num=list(range(2,11)) #it is a 40 card deck game with face card removed\n    suits = ['S','H','C','D']\n    deck = []\n    for ace_card in range(len(suits)): #this for loop appends ace cards in the deck\n        ace=suits[ace_card]+'A'\n        deck.append(ace)\n    for suits_card in num:\n        for s in suits:\n            card = s+str(suits_card)\n            deck.append(card)\n    random.shuffle(deck) #shuffles the 40 deck \n    return deck\n\ndef get_cards(deck40):\n    #lets consider A as 11 while addition for higher cards\n    #p1c - player 1 random cards\n    #p2c - player 2 random cards\n    p1c,p2c = [],[]\n    for i in range(2):\n        p1c.append(random.choice(deck40))\n        p2c.append(random.choice(deck40))\n    return(p1c,p2c)\n\ndef display1card(sp1c,sp2c): #show 1 card out of 2 to both the players\n    print(\"Warning: Displaying just one card of player 1.........\\n\")\n    time.sleep(3)\n    print(\"One of the card of player 1 is: \\n\")\n    print('*' * 10)\n    for i in range(5):\n        if i == 2:\n            print('*   ' +random.choice(sp1c) + '   *')\n            continue\n        print('*' + ' ' * 8 + '*')\n    print('*' * 10)\n    time.sleep(3)\n    #this for loop below is just a distraction provided so that the other player should not see each other cards\n    for i in range(10000):\n        print(random.choice(string.ascii_letters), end='')\n        if i in (50, 100, 150,200,250, 290, 320, 350, 380):\n            print('')\n    time.sleep(3)\n    print(\"\\n Warning: Displaying just one card of player 2.........\\n\")\n    time.sleep(3)\n\n    #one card of player 2 is displayed here, a for loop is used of random numbers for distraction to player 1\n\n    print(\"One of the card of player 2 is: \\n\")\n    print('*' * 10)\n    for i in range(5):\n        if i == 2:\n            print('*   ' +random.choice(sp2c)+ '   *')\n            continue\n        print('*' + ' ' * 8 + '*')\n    print('*' * 10)\n    time.sleep(4)\n    for i in range(10000):\n        print(random.choice(string.ascii_letters), end='')\n        if i in (30,100,170, 200, 230, 250, 290, 320, 350, 380):\n            print('')\n    time.sleep(2)\n    print('\\n')\n\ndef bet(chips1, chips2, name1, name2):\n    print('Collecting match fee of 50 chips each....')\n    time.sleep(1.5)\n    chips1 = chips1 - 50\n    chips2 = chips2 - 50\n    print('Lets get the Kakegurui freak on')\n    time.sleep(2)\n\n    while chips1 > 20 and chips2 > 20:\n        # player1 bets here\n        while True:\n            try:\n                bet1 = int(input(f'{name1}, place your bet(20<chips<100): '))\n                if bet1 < 20 or bet1 > 100:\n                    print(\"Enter a valid bet: \")\n                    continue\n                if chips1 < bet1:\n                    print('You can only place bet in range under', chips1, end='')\n                    continue\n                chips1 = chips1 - bet1\n\n                print('Balance player1', chips1)\n                break\n\n            except Exception:\n                continue\n            # used try and except coz it should only accept validate number\n\n        if chips1 < 20:\n            print(name1, 'your are out of chips')\n            break\n\n        # player2 bets here\n        while True:\n            try:\n                bet2 = int(input(f\"{name2},place your bet(20<chips<100): \"))\n                if bet2 < 20 or bet2 > 100:\n                    print('Enter a valid bet: ')\n                    continue\n\n                if chips2 < bet2:\n                    print('You can only place bet in range under', chips2)\n                    continue\n\n                chips2 = chips2 - bet2\n\n                print('Balance', chips2)\n                break\n            except Exception:\n                continue\n\n        if chips2 < 20:\n            print(name2, 'your are out of chips')\n            break\n\n\ndef show(p1c,p2c):\n    print('Player 1 cards:',p1c)\n    print('Player 2 cards:',p2c)\n\ndef winner(p1name,p2name,player1_card,player2_card):\n    #addition of higher card is important when both player gets same card or pig\n\n    # if both player as pair, higher card wins\n    sum_for_same_pair_p1=sum_for_same_pair_p2=0   #sum of both player p1 and p2\n    #if both player as suit, same house\n    sum_for_same_suit_p1=sum_for_same_suit_p2=0\n    #if both as a pig\n    sum_for_pig_p1=sum_for_pig_p2=0\n\n    if player1_card[0][1:] == player1_card[1][1:] and player2_card[0][1:] != player2_card[1][1:]:\n        print(\"{} won, Pair of number\".format(p1name))\n    elif player1_card[0][1:] != player1_card[1][1:] and player2_card[0][1:] == player2_card[1][1:]:\n        print(\"{} won, Pair of number\".format(p2name))\n    elif player1_card[0][1:] == player1_card[1][1:] and player2_card[0][1:] == player2_card[1][1:]:\n        for player1 in range(len(player1_card)):\n            if 'A' in player1_card[player1][1:]:\n                player1_card[player1] = player1_card[player1].replace(player1_card[player1][1:], '11')\n            sum_for_same_pair_p1 = sum_for_same_pair_p1 + int(player1_card[player1][1:])\n        for player2 in range(len(player2_card)):\n            if 'A' in player2_card[player2][1:]:\n                player2_card[player2] = player2_card[player2].replace(player2_card[player2][1:], '11')\n            sum_for_same_pair_p2 = sum_for_same_pair_p2 + int(player2_card[player2][1:])\n        if sum_for_same_pair_p1 > sum_for_same_pair_p2:\n            print(\"{} won, as a Higher Pair card\".format(p1name))\n        else:\n            print(\"{} won, as a Higher Pair card\".format(p2name))\n    elif player1_card[0][:1] == player1_card[1][:1] and player2_card[0][:1] != player2_card[1][:1]:\n        print(\"{} won, Higher Suits\".format(p1name))\n    elif player1_card[0][:1] != player1_card[1][:1] and player2_card[0][:1] == player2_card[1][:1]:\n        print(\"{} won, Higher Suits\".format(p2name))\n    elif player1_card[0][:1] == player1_card[1][:1] and player2_card[0][:1] == player2_card[1][:1]:\n        for player1 in range(len(player1_card)):\n            if 'A' in player1_card[player1][1:]:\n                player1_card[player1] = player1_card[player1].replace(player1_card[player1][1:], '11')\n            sum_for_same_suit_p1 = sum_for_same_suit_p1 + int(player1_card[player1][1:])\n        for player2 in range(len(player2_card)):\n            if 'A' in player2_card[player2][1:]:\n                player2_card[player2] = player2_card[player2].replace(player2_card[player2][1:], '11')\n            sum_for_same_suit_p2 = sum_for_same_suit_p2 + int(player2_card[player2][1:])\n        if sum_for_same_suit_p1 > sum_for_same_suit_p2:\n            print(\"{} won, as a Higher Suit card\".format(p1name))\n        else:\n            print(\"{} won, as a Higher Suit card\".format(p2name))\n    else:\n        for player1 in range(len(player1_card)):\n            if 'A' in player1_card[player1][1:]:\n                player1_card[player1] = player1_card[player1].replace(player1_card[player1][1:], '11')\n            sum_for_pig_p1 = sum_for_pig_p1 + int(player1_card[player1][1:])\n        for player2 in range(len(player2_card)):\n            if 'A' in player2_card[player2][1:]:\n                player2_card[player2] = player2_card[player2].replace(player2_card[player2][1:], '11')\n            sum_for_pig_p2 = sum_for_pig_p2 + int(player2_card[player2][1:])\n        if sum_for_pig_p1 > sum_for_pig_p2:\n            print(\"{} won, as a Higher Pig card\".format(p1name))\n        else:\n            print(\"{} won, as a Higher Pig card\".format(p2name))\n\n\n\ndef play_again():\n    play = input('Do you wanna play again?(Y/n)').lower()\n    if play.startswith('y'):\n        return True\n    else:\n        print(\"Thank You For Playing\")\n        sys.exit()\n\nwhile True:\n    print(kakegurui_intro) #the intro py module just displays the game intro design\n    #enter players name\n    game_rules=input('Do you want to see the game rules(y/n):').lower()\n    if 'y' in game_rules:\n        display_rules()\n    deck40=deck_cards()\n    player1=input('Enter player 1 name:')\n\n    #check if the entered name is valid\n\n    while player1=='' or player1 in string.digits or player1 in string.punctuation:\n        player1=input('Enter player 1 name:')\n        continue\n\n    player2=input('Enter player 2 name:')\n\n    while player2=='' or player2 in string.digits or player2 in string.punctuation:\n        player2=input('Enter player 2 name:')\n        continue\n    chips1,chips2=500,500\n    #choose cards\n    k = get_cards(deck40)\n    card_p1, card_p2 = k[0], k[1]\n    display1card(card_p1,card_p2)\n    bet(chips1,chips2,player1,player2)\n    show(card_p1,card_p2)\n    winner(player1,player2,card_p1,card_p2)\n    play_again()\n    break
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kakegurui.py b/kakegurui.py
--- a/kakegurui.py	(revision 244206a5780fa0f2f952ba9412a49a2f1e0c4ef1)
+++ b/kakegurui.py	(date 1618395156043)
@@ -217,6 +217,7 @@
         sys.exit()
 
 while True:
+    round = 0
     print(kakegurui_intro) #the intro py module just displays the game intro design
     #enter players name
     game_rules=input('Do you want to see the game rules(y/n):').lower()
@@ -237,6 +238,7 @@
         player2=input('Enter player 2 name:')
         continue
     chips1,chips2=500,500
+
     #choose cards
     k = get_cards(deck40)
     card_p1, card_p2 = k[0], k[1]
